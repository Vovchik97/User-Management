basePath: /
definitions:
  handlers.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.ResponseError:
    properties:
      message:
        type: string
    type: object
  handlers.UpdateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    required:
    - email
    type: object
host: localhost:8080
info:
  contact:
    email: vladimir@example.com
    name: Владимир Шипунов
  description: This is a RESTful API for managing users and roles.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: User Management API
  version: "1.0"
paths:
  /users:
    get:
      description: Получение списка всех пользователей.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Ошибка при получении списка пользователей
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Получение списка пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Создание нового пользователя с указанием имени, email, пароля и
        роли.
      parameters:
      - description: Параметры пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Ошибка при создании пользователя
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Создание нового пользователя
      tags:
      - Users
  /users/{id}:
    delete:
      description: Удаление пользователя по его ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Пользователь удален
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Удаление пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновление данных пользователя по его ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Параметры обновления пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Ошибка при обновлении пользователя
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Обновление пользователя
      tags:
      - Users
swagger: "2.0"
