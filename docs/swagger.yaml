basePath: /
definitions:
  handlers.AuthResponse:
    properties:
      token:
        type: string
    type: object
  handlers.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.GroupInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.ResponseError:
    properties:
      message:
        type: string
    type: object
  handlers.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  handlers.UpdateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  handlers.UpdateUserRoleInput:
    properties:
      role_name:
        type: string
    required:
    - role_name
    type: object
  handlers.UserGroupInput:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  models.ActivityLog:
    properties:
      action:
        type: string
      id:
        type: integer
      timestamp:
        type: string
      user_id:
        type: integer
    type: object
  models.Group:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: integer
      is_banned:
        type: boolean
      name:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: vladimir@example.com
    name: Владимир Шипунов
  description: This is a RESTful API for managing users and roles.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: User Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные для входа
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: JWT токен
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Ошибка при валидации данных
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "401":
          description: Неверный email или пароль
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Вход пользователя в систему
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Регистрационные данные
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Регистрация прошла успешно
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Ошибка при валидации данных
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "500":
          description: Ошибка при хешировании пароля или сохранении данных
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      summary: Регистрация нового пользователя
      tags:
      - Auth
  /groups:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Group'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Получение списка всех групп
      tags:
      - Groups
    post:
      consumes:
      - application/json
      parameters:
      - description: Название группы
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/handlers.GroupInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Создание новой группы
      tags:
      - Groups
  /groups/{id}:
    delete:
      parameters:
      - description: ID группы
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Удаление группы
      tags:
      - Groups
    put:
      consumes:
      - application/json
      parameters:
      - description: ID группы
        in: path
        name: id
        required: true
        type: integer
      - description: Новое название
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/handlers.GroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Обновление названия группы
      tags:
      - Groups
  /groups/{id}/users:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID группы
        in: path
        name: id
        required: true
        type: integer
      - description: ID пользователя для добавления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserGroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Добавление пользователя в группу
      tags:
      - Groups
  /groups/{id}/users/{user_id}:
    delete:
      parameters:
      - description: ID группы
        in: path
        name: id
        required: true
        type: integer
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Удаление пользователя из группы
      tags:
      - Groups
  /users:
    get:
      description: Получение списка всех пользователей или отфильтрованных по роли.
      parameters:
      - description: Роль пользователя
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Ошибка при получении списка пользователей
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Получение списка пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Создание нового пользователя с указанием имени, email, пароля и
        роли.
      parameters:
      - description: Параметры пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Ошибка при создании пользователя
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Создание нового пользователя
      tags:
      - Users
  /users/{id}:
    delete:
      description: Удаление пользователя по его ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Пользователь удален
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновление данных пользователя по его ID.
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Параметры обновления пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Ошибка при обновлении пользователя
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Обновление пользователя
      tags:
      - Users
  /users/{id}/ban:
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Временная блокировка пользователя
      tags:
      - Users
  /users/{id}/role:
    patch:
      consumes:
      - application/json
      description: Обновление роли пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Новая роль
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Неверный ввод
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Назначить роль пользователю
      tags:
      - Users
  /users/{id}/unban:
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Разблокировка пользователя
      tags:
      - Users
  /users/activity:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ActivityLog'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Получить логи активности
      tags:
      - Activity
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Профиль пользователя
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Неавторизованный доступ
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/handlers.ResponseError'
        "500":
          description: Ошибка при получении профиля пользователя
          schema:
            $ref: '#/definitions/handlers.ResponseError'
      security:
      - BearerAuth: []
      summary: Получение профиля текущего пользователя
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Введите токен в формате: Bearer <your-token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
